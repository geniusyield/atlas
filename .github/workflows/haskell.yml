name: Haskell CI

on:
  workflow_call:
    secrets:
      MAESTRO_CONFIG:
        description: 'Maestro config.'
        required: true
      BLOCKFROST_CONFIG:
        description: 'Blockfrost config.'
        required: true
      PREPROD_SUBMIT_TEST_WALLET_SKEY:
        description: 'Signing key for testing.'
        required: true
    outputs:
      ATLAS_VERSION:
        description: "ATLAS_VERSION"
        value: ${{ jobs.build.outputs.ATLAS_VERSION }}

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-22.04
    outputs:
      ATLAS_VERSION: ${{ steps.get_atlas_version.outputs.ATLAS_VERSION }}
    steps:
    - name: Checkout source code
      uses: actions/checkout@v3
    - name: Install dependencies (apt-get)
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends \
            autoconf \
            automake \
            build-essential \
            ca-certificates \
            chrony \
            dpkg-dev \
            gcc \
            gnupg \
            g++ \
            hlint \
            libc6-dev \
            libncursesw5 \
            libffi-dev \
            libgmp-dev \
            liblzma-dev \
            libnuma-dev \
            libpq-dev \
            libssl-dev \
            libsystemd-dev \
            libtinfo-dev \
            libtool \
            netbase \
            pkg-config \
            procps \
            tmux \
            xz-utils \
            zlib1g-dev
    - name: Validate code (run pre-commit hooks)
      uses: pre-commit/action@v3.0.0
      with:
        extra_args: --verbose --all-files
    - name: Prepare config files
      env:
        MAESTRO_CONFIG: ${{secrets.MAESTRO_CONFIG}}
        BLOCKFROST_CONFIG: ${{secrets.BLOCKFROST_CONFIG}}
        PREPROD_SUBMIT_TEST_WALLET_SKEY: ${{secrets.PREPROD_SUBMIT_TEST_WALLET_SKEY}}
      run: |
          # MAESTRO_CONFIG ----------------------------------
          echo "Creating maestro-config.json from MAESTRO_CONFIG env var..."
          echo "$MAESTRO_CONFIG" >> maestro-config.json
          if [[ -f maestro-config.json ]] ; then
            echo "[OK] maestro-config.json has been created."
          else
            echo "[ERROR] maestro-config.json is missing."
            exit 1
          fi
          # BLOCKFROST_CONFIG ----------------------------------
          echo "Creating blockfrost-config.json from BLOCKFROST_CONFIG env var..."
          echo "$BLOCKFROST_CONFIG" >> blockfrost-config.json
          if [[ -f blockfrost-config.json ]] ; then
            echo "[OK] blockfrost-config.json has been created."
          else
            echo "[ERROR] blockfrost-config.json is missing."
            exit 1
          fi
          # PREPROD_SUBMIT_TEST_WALLET_SKEY ----------------------------------
          echo "Creating preprod-submit-test-wallet.skey from PREPROD_SUBMIT_TEST_WALLET_SKEY env var..."
          echo "$PREPROD_SUBMIT_TEST_WALLET_SKEY" >> preprod-submit-test-wallet.skey
          if [[ -f preprod-submit-test-wallet.skey ]] ; then
            echo "[OK] preprod-submit-test-wallet.skey has been created."
          else
            echo "[ERROR] preprod-submit-test-wallet.skey is missing."
            exit 1
          fi
          stat maestro-config.json
          stat blockfrost-config.json
          stat preprod-submit-test-wallet.skey
          
    - name: Setup haskell tooling
      uses: haskell/actions/setup@v2
      with:
        ghc-version: '9.6.5'
        cabal-version: '3.10.1.0'
        enable-stack: true
        stack-version: '2.9'
    - name: Setup cache
      uses: actions/cache@v3
      env:
        cache-name: cache-cabal
      with:
        path: ~/.cabal
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/*.cabal') }}-${{ hashFiles('**/cabal.project') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
    - name: Install LIBSODIUM
      run: |
        git clone https://github.com/input-output-hk/libsodium
        cd libsodium
        git checkout dbb48cc
        ./autogen.sh
        ./configure
        make
        sudo make install
        sudo ldconfig
    - name: Install SEPC256K1
      run: |
        git clone https://github.com/bitcoin-core/secp256k1
        cd secp256k1
        git checkout ac83be33d0956faf6b7f61a60ab524ef7d6a473a
        ./autogen.sh
        ./configure --prefix=/usr --enable-module-schnorrsig --enable-experimental
        make
        sudo make install
        sudo ldconfig
    - name: Install BLST
      run: |
        : ${BLST_VERSION:='v0.3.11'}
        git clone --depth 1 --branch ${BLST_VERSION} https://github.com/supranational/blst
        cd blst
        ./build.sh
        cat > libblst.pc << EOF
        prefix=/usr/local
        exec_prefix=\${prefix}
        libdir=\${exec_prefix}/lib
        includedir=\${prefix}/include

        Name: libblst
        Description: Multilingual BLS12-381 signature library
        URL: https://github.com/supranational/blst
        Version: ${BLST_VERSION#v}
        Cflags: -I\${includedir}
        Libs: -L\${libdir} -lblst
        EOF
        sudo cp libblst.pc /usr/local/lib/pkgconfig/
        sudo cp bindings/blst_aux.h bindings/blst.h bindings/blst.hpp  /usr/local/include/
        sudo cp libblst.a /usr/local/lib
        sudo chmod u=rw,go=r /usr/local/{lib/{libblst.a,pkgconfig/libblst.pc},include/{blst.{h,hpp},blst_aux.h}}
    - name: Update dependencies (cabal)
      run: cabal update
    - name: Build dependencies (cabal)
      run: cabal build --only-dependencies --enable-tests --enable-benchmarks
    - name: Build all targets (cabal)
      run: cabal build --enable-tests --enable-benchmarks all
    - name: Run all tests (cabal)
      run: cabal run atlas-tests -- -j1 --hide-successes
    - name: Run doctest (docspec)
      run: |
        # Install docspec and run doctests.
        echo "=========================[ INSTALL DOCSPEC ]========================"
        echo " -> Started at $(date --iso-8601=seconds --utc)."
        curl -sL https://github.com/phadej/cabal-extras/releases/download/cabal-docspec-0.0.0.20230517/cabal-docspec-0.0.0.20230517-x86_64-linux.xz > ./cabal-docspec.xz
        xz -d < ./cabal-docspec.xz > ./cabal-docspec
        rm -f ./cabal-docspec.xz
        chmod a+x ./cabal-docspec
        echo " -> Docspec has been installed."
        echo "===========================[ RUN DOCSPEC ]==========================="
        ./cabal-docspec -q --ignore-trailing-space
        echo " ============================[ FINISHED ]============================"
    - name: Symlink cardano-node binaries
      run: cabal install --package-env=$(pwd) --overwrite-policy=always cardano-cli cardano-node
    - name: Run privnet tests
      run: cabal run atlas-privnet-tests -- -j1 --hide-successes
    - name: Run checks (cabal)
      run: cabal check
    - name: Create source distribution file (cabal)
      run: cabal sdist
    - name: Identify atlas version (cabal)
      id: get_atlas_version
      run: |
        export ATLAS_VERSION=$(cabal info . | awk '{print $2 ;exit}') ;
        echo "ATLAS_VERSION: $ATLAS_VERSION"
        echo "ATLAS_VERSION=${ATLAS_VERSION}" >> $GITHUB_ENV
        echo "ATLAS_VERSION=${ATLAS_VERSION}" >> $GITHUB_OUTPUT
    - name: Generate documentation (cabal haddock)
      run: cabal haddock --html --hyperlink-source --haddock-options="--use-unicode" --haddock-quickjump
    - name: Upload haddock documentation
      uses: actions/upload-pages-artifact@v1.0.8
      with:
        path: ./dist-newstyle/build/x86_64-linux/ghc-9.6.5/${{env.ATLAS_VERSION}}/doc/html/atlas-cardano/
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: source-distribution-file
        path: ./dist-newstyle/sdist/${{env.ATLAS_VERSION}}.tar.gz
