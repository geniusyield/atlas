{-|
Module      : GeniusYield.Providers.Mempool
Description : Provider to add support for monitoring mempool in addition to existing provider functions.
Copyright   : (c) 2024 GYELD GMBH
License     : Apache 2.0
Maintainer  : support@geniusyield.co
Stability   : develop
-}

-- TODO: Add it to @GeniusYield.Providers@.
module GeniusYield.Providers.Mempool
  ( -- TODO: Add export module list
    getAllMempoolTxsInsOuts
  ) where

-- TODO: Clean up imports.
import           Cardano.Api         (EraInMode (..),
                                      LocalTxMonitoringQuery (..),
                                      LocalTxMonitoringResult (..),
                                      TxInMode (..), queryTxMonitoringLocal)
import qualified Cardano.Api.Shelley as Api.S
import qualified Data.Set            as Set
import           GeniusYield.Imports ((&))
import           GeniusYield.Types

-- TODO: Think about exceptions.
-- TODO: Note that different mempool txs may refer outputs generated by each other.

-- | Augments `GYQueryUTxO` given by a provider by considering transactions in mempool.
-- augmentProviderUtxosWithMempoolTxs GYQueryUTxO {..} conn = do
--   GYQueryUTxO {gyQueryUtxosAtTxOutRefsWithDatums'=_gyQueryUtxosAtTxOutRefsWithDatums', gyQueryUtxosAtTxOutRefs'=_gyQueryUtxosAtTxOutRefs', gyQueryUtxosAtPaymentCredential'=_gyQueryUtxosAtPaymentCredential', gyQueryUtxosAtPaymentCredWithDatums'=_gyQueryUtxosAtPaymentCredWithDatums', gyQueryUtxosAtAddressesWithDatums'=_gyQueryUtxosAtAddressesWithDatums', gyQueryUtxosAtAddresses'=_gyQueryUtxosAtAddresses', gyQueryUtxosAtAddressWithDatums'=_gyQueryUtxosAtAddressWithDatums', gyQueryUtxosAtAddress'=_gyQueryUtxosAtAddress', gyQueryUtxoRefsAtAddress'=_gyQueryUtxoRefsAtAddress', gyQueryUtxoAtTxOutRef'=_gyQueryUtxoAtTxOutRef'}

augmentUtxosWithMempoolTxs :: GYUTxOs -> Api.S.LocalNodeConnectInfo mode -> IO GYUTxOs
augmentUtxosWithMempoolTxs utxos conn = do
  (ins, outsWithDatums) <- getAllMempoolTxsInsOuts conn
  let outs' = utxosFromList $ map fst outsWithDatums
  pure $! utxosRemoveTxOutRefs ins (outs' <> utxos)

augmentUtxosAlongDatumsWithMempoolTxs utxosWithDatums conn = do
  (ins, outsWithDatums) <- getAllMempoolTxsInsOuts conn
  undefined

-- | Get's all the inputs and the outputs of the txs present in mempool.
getAllMempoolTxsInsOuts :: Api.S.LocalNodeConnectInfo mode -> IO (Set.Set GYTxOutRef, [(GYUTxO, Maybe GYDatum)])
getAllMempoolTxsInsOuts conn = go (mempty, mempty)
  where
    go :: (Set.Set GYTxOutRef, [(GYUTxO, Maybe GYDatum)]) -> IO (Set.Set GYTxOutRef, [(GYUTxO, Maybe GYDatum)])
    go acc@(!ins, !outsWithDatums) = do
      LocalTxMonitoringNextTx mTxInMode _ <- queryTxMonitoringLocal conn LocalTxMonitoringSendNextTx
      case mTxInMode of
        Nothing -> pure acc
        Just (TxInMode tx BabbageEraInCardanoMode) ->
          let txBody = txFromApi tx & getTxBody
              !ins' = Set.fromList $ txBodyTxIns txBody
              !outsWithDatums' = txBodyUTxOsWithDatums txBody
          in pure (Set.union ins ins', outsWithDatums ++ outsWithDatums')
        Just _ -> go acc
